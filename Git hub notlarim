iki accountla calisiyorsan, we push isleminde karistirmamak icin
    git config user.name "uraccount"
    git config user.email "uraccount@gmail.com"
ayarlarini repo dan sonra yapmalisin

adding ssh key to git account
    ssh-add ~/.ssh/id_rssa
to see current git account
    git config user.name
    or
    cat ~/.gitconfig 


<!-- new line -->

repo yu kopyala
git clone url

bir proje yi git e eklemek
git init [projectName]

proje klasorunu VCS e eklemek icin
    git init 


Degisikleri remote dan local e indirir
    git fetch 

Inidirilen degisikleri local depoya uygular
    git merge 

veya fetch & pull ikisini beraber yapmak icin
    git pull 

Versiyonlama
    - git add fileName veya .
    - git commit -m'message'
    bu sekilde versiyon olusturulmus oluyor.

git log                 => bir versiyon da hangi degisikliklerin oldugunu gormek icin kullanilir
git log --oneline       => commitleri one line da gosterir

git show {hashCoduununIlk7Karakteri}

NOT; Bir den fazla komit her zaman bir repo icinde olabilir. en son alinan commit e HEAD denir. 
Bu HEAD degistirildiginde onceki versiyonlara donus yapilir.

    git restore [dosya]             => tek bir dosyayi iptal eder
    git restore .                   => butun dosyalari iptal eder

    git restore --staged [dosya]    => staging teki bir dosyayi iptal eder

    git restore --staged .          => butun dosyalari iptal eder

    git checkout --                 => eger degisiklikler commit edilmemisse en son commit e geri donecek sekilde degisiklikleri siler

    git revert hashcode => bu da bir onceki commit e geri doner ve otomatik olarak commit  i olusturur
    git revert -n hashcode => bu is otomatik commit yapmadan ilgili versiyona donus yapar

    MERGE
    meerge branch_a into branch_b
    git checkout branch_b
    git merge branch_a

    merge islemini iptal etmek icin kullanilir
    git merge -abort



    STASH
    git stash save 'stash name'         => stash olusturur
    git stash list                      => stashlari listeler
    git stash apply {stash}             => ilgili stash apply eder
    git stash pop                       => apply the last STASH

    BRANCH
    git branch                          => branchlari listeler
    git branch newBranch                => yeni branch olusturur
    git branch -d branchName to delete  => ismi verilen branch i siler
    git branch -m newBranchName         => mecvut branchin ismini degistirir.


    RESTORE
    git restore --staged .              => butun dosyalari iptal eder

    CHECKOUT
        git checkout newBranch          => baska branch a gecis yapar
        git checkout -b branchName            => branc create eder ve checkout islemini de yapar
        git checkout [hash][fileName]   => bir file i istenen versiyona dondurur
        git checkout [hash] .           => butun dosyalari istenen versiyona dondurur

        checkout tan sonra eger commit yapilmazsa versiyon basa alinmaz
        sonrasinda yeniden ayni yukaridaki sekilde yeniden versiyon degistirilebilir. bunun yerine revert kullanilabilir
            git add .
            git commit -m "message"
        
        git checkout --                 => commit edilmemis degisiklikleri geri alir. staging ve working area hepsini
    
    RESET
    git reset --hard [hash]             =>bu versiyona gider ve aradaki diger versiyonlari siler ve o versiyona doner
        